---
## Author
author:
  name: Пашутина Анна Алексеевна
  email: 1032253642@pfur.com
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Моscow
      aaddress: ул. Мииклухо-Маклая, дддд.6
      
## Title
title: "Отчет по лабороторной работе №2"
subtitle: "Система контроля версий git"
---

# Цель работы
Целью работы является ознакомление с системой контроля Git, приобретение практических навыков по работе с данной системой.
           

# Задание
Создать учетной записи и настроить github  
Создать SSH ключа  
Создать рабочее пространство и репозиторий курса на основе шаблона
Настроить каталог курса
Создать отчёт по лабораторной работе №2 и загрузить его на github



# Выполнение лабораторной работы
Чтобы использовать команду git, установим ее с помощью sudo apt install git.

![Установка команды git](image/image1.png){#fig:001 width=70%}

Введем следующие команды, указав имя и e-mail владельца репозитория.

![Настройка имени и почты в git](image/image2.png){#fig:002 width=70%}

Настроим utf-8 в выводе сообщений git.

![Настройка для правильного отображения символов](image/image3.png){#fig:003 width=70%}

Зададим имя начальной ветки (будем называть её master) с помощью команды git init.

![Настройка имени ветки, в которую мы будем коммитить измененные файлы](image/image4.png){#fig:004 width=70%}

Настройка core.autocrlf предназначена для того, чтобы в главном репозитории все переводы
строк текстовых файлах были одинаковы.
Настройка core.safecrlf предназначена для проверки, является ли окончаний строк
обратимым для текущей настройки core.autocrlf. Данная настройка заставит git предупреждать
нас, если обнаружится несоответствие, которое может вызвать проблемы при совместной работе
в разных ОС

![Настройка для стандартизации перевода строк и предупреждения, если в файлах будут различаться переносы строк](image/image5.png){#fig:005 width=70%}

2.4.3. Создание SSH-ключа.
Для последующей идентификации пользователя на сервере репозиториев сгенерируем
два ключа (приватный и открытый) с помощью команды ssh-keygen –C, а в комментарии
укажем имя, фамилию и почту. Далее терминал предложит нам сохранить наш ключ в
директорию ./.ssh, нажмем Enter, чтобы согласиться. Теперь введем пароль и подтвердим
его, введя второй раз. Наши ключи готовы.

![Создвние ssh ключа и пароля для него](image/image6.png){#fig:006 width=70%}

Скачиваем xclip с помощью команды sudo apt install xclip.

![Скачивание xclip](image/image7.png){#fig:007 width=70%}

Теперь копируем наш публичный ключ с помощью команды xclip.

![Копирование ssh ключа в буфер бмена](image/image8.png){#fig:008 width=70%}

Заходим на github под своей учетной записью, затем в раздел настроек, затем в
раздел SSH and GPG keys, вставляем ключ и даем ему название Title.

![Переход в настройки Github](image/image9.png){#fig:009 width=70%}


![Переходим в раздел SSH и GPG keys.](image/image10.png){#fig:010 width=70%}

Добавляем публичный SSH ключ.

![Добавление публичного ssh ключа](image/image11.png){#fig:011 width=70%}

Проверяем, что ключ добавился.

![Проверка наличия ключа](image/image12.png){#fig:012 width=70%}

2.4.4. Создание рабочего пространства и репозитория курса на основе шаблона.
Откроем терминал. Создадим каталог для предмета «Архитектура компьютера».

![Создали каталог для предмета «Архитектура компьютера»](image/image13.png){#fig:013 width=70%}


2.4.5. Создание репозитория курса на основе шаблона.
Перейдем на страницу репозитория с шаблоном курса и создадим репозиторий. Затем откроем
терминал и перейдем в каталог курса и клонируем созданный репозиторий.

![Создаем репозиторий по шаблону и называем его "study_2025-2026_arch-pc"](image/image14.png){#fig:014 width=70%}

Переходим в каталог курса.

![Переход в каталог курса](image/image15.png){#fig:015 width=70%}

Клонируем созданный репозиторий.

![Клонирование созданного репозитория](image/image16.png){#fig:016 width=70%}

6.Настройка каталога курса.
Перейдем в каталог курса.

![Переход в каталог курса](image/image17.png){#fig:017 width=70%}

Создадим необходимые каталоги.

![Создание необходимых каталогов](image/image18.png){#fig:018 width=70%}

Отслеживаем файл и записываем изменения в репозиотрий.

![Отслеживание файла и запись изменений в репозиторий](image/image19.png){#fig:019 width=70%}

Отправляем данные в репозиторий.

![Отправляем данные в репозиторий](image/image20.png){#fig:020 width=70%}

Проверяем выполнение команд.

![Проверка, что команды сработали](image/image21.png){#fig:021 width=70%}

# Задания для самостоятельной работы

1. Создадим отчёт по выполнению лабораторной работы №2 в соответствующем каталоге (labs/lab02/report).

![Создание отчета по лабораторной работе номер 2](image/image22.png){#fig:022 width=70%}

2. Скопируем отчеты по выполнению предыдущих лабораторных работ в соответствующие каталоги созданного рабочего пространства.

![Копирование файлов предыдущей лабораторной работы](image/image23.png){#fig:023 width=70%}

3. Загрузим файлы на github.


![Загрузка файлов на github](image/image24.png){#fig:024 width=70%}


# Вывод
Мы познакомились с системой контроля git, выучили команды для работы с ним. А также создали репозиторий на платформе github, где в последствии будут храниться отчёты по лабораторным
работам
---


